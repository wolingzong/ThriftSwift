/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "eog_unit_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace riverfall { namespace eog {

int _kUnitType_eValues[] = {
  UnitType_e::Fighter,
  UnitType_e::Bomber,
  UnitType_e::Destroyer,
  UnitType_e::Frigate,
  UnitType_e::Transporter
};
const char* _kUnitType_eNames[] = {
  "Fighter",
  "Bomber",
  "Destroyer",
  "Frigate",
  "Transporter"
};
const std::map<int, const char*> _UnitType_e_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kUnitType_eValues, _kUnitType_eNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const UnitType_e::type& val) {
  std::map<int, const char*>::const_iterator it = _UnitType_e_VALUES_TO_NAMES.find(val);
  if (it != _UnitType_e_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const UnitType_e::type& val) {
  std::map<int, const char*>::const_iterator it = _UnitType_e_VALUES_TO_NAMES.find(val);
  if (it != _UnitType_e_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


Unit_s::~Unit_s() noexcept {
}


void Unit_s::__set_attackArea(const int8_t val) {
  this->attackArea = val;
}

void Unit_s::__set_maxTargetCount(const int8_t val) {
  this->maxTargetCount = val;
}

void Unit_s::__set_attack(const int64_t val) {
  this->attack = val;
}

void Unit_s::__set_health(const int64_t val) {
  this->health = val;
}

void Unit_s::__set_armor(const int64_t val) {
  this->armor = val;
}

void Unit_s::__set_travelSpeed(const int64_t val) {
  this->travelSpeed = val;
}

void Unit_s::__set_maxMoveRange(const int64_t val) {
  this->maxMoveRange = val;
}

void Unit_s::__set_cargo(const int64_t val) {
  this->cargo = val;
}

void Unit_s::__set_id(const std::string& val) {
  this->id = val;
}
std::ostream& operator<<(std::ostream& out, const Unit_s& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Unit_s::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->attackArea);
          this->__isset.attackArea = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->maxTargetCount);
          this->__isset.maxTargetCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->attack);
          this->__isset.attack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->health);
          this->__isset.health = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->armor);
          this->__isset.armor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->travelSpeed);
          this->__isset.travelSpeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->maxMoveRange);
          this->__isset.maxMoveRange = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cargo);
          this->__isset.cargo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Unit_s::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Unit_s");

  xfer += oprot->writeFieldBegin("attackArea", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->attackArea);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxTargetCount", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->maxTargetCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attack", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->attack);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("health", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->health);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("armor", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->armor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("travelSpeed", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->travelSpeed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxMoveRange", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->maxMoveRange);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cargo", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->cargo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Unit_s &a, Unit_s &b) {
  using ::std::swap;
  swap(a.attackArea, b.attackArea);
  swap(a.maxTargetCount, b.maxTargetCount);
  swap(a.attack, b.attack);
  swap(a.health, b.health);
  swap(a.armor, b.armor);
  swap(a.travelSpeed, b.travelSpeed);
  swap(a.maxMoveRange, b.maxMoveRange);
  swap(a.cargo, b.cargo);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

Unit_s::Unit_s(const Unit_s& other0) {
  attackArea = other0.attackArea;
  maxTargetCount = other0.maxTargetCount;
  attack = other0.attack;
  health = other0.health;
  armor = other0.armor;
  travelSpeed = other0.travelSpeed;
  maxMoveRange = other0.maxMoveRange;
  cargo = other0.cargo;
  id = other0.id;
  __isset = other0.__isset;
}
Unit_s& Unit_s::operator=(const Unit_s& other1) {
  attackArea = other1.attackArea;
  maxTargetCount = other1.maxTargetCount;
  attack = other1.attack;
  health = other1.health;
  armor = other1.armor;
  travelSpeed = other1.travelSpeed;
  maxMoveRange = other1.maxMoveRange;
  cargo = other1.cargo;
  id = other1.id;
  __isset = other1.__isset;
  return *this;
}
void Unit_s::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Unit_s(";
  out << "attackArea=" << to_string(attackArea);
  out << ", " << "maxTargetCount=" << to_string(maxTargetCount);
  out << ", " << "attack=" << to_string(attack);
  out << ", " << "health=" << to_string(health);
  out << ", " << "armor=" << to_string(armor);
  out << ", " << "travelSpeed=" << to_string(travelSpeed);
  out << ", " << "maxMoveRange=" << to_string(maxMoveRange);
  out << ", " << "cargo=" << to_string(cargo);
  out << ", " << "id=" << to_string(id);
  out << ")";
}


Army_s::~Army_s() noexcept {
}


void Army_s::__set_id(const std::string& val) {
  this->id = val;
}

void Army_s::__set_unitList(const std::vector<Unit_s> & val) {
  this->unitList = val;
}
std::ostream& operator<<(std::ostream& out, const Army_s& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Army_s::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->unitList.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->unitList.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->unitList[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.unitList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Army_s::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Army_s");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unitList", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->unitList.size()));
    std::vector<Unit_s> ::const_iterator _iter7;
    for (_iter7 = this->unitList.begin(); _iter7 != this->unitList.end(); ++_iter7)
    {
      xfer += (*_iter7).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Army_s &a, Army_s &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.unitList, b.unitList);
  swap(a.__isset, b.__isset);
}

Army_s::Army_s(const Army_s& other8) {
  id = other8.id;
  unitList = other8.unitList;
  __isset = other8.__isset;
}
Army_s& Army_s::operator=(const Army_s& other9) {
  id = other9.id;
  unitList = other9.unitList;
  __isset = other9.__isset;
  return *this;
}
void Army_s::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Army_s(";
  out << "id=" << to_string(id);
  out << ", " << "unitList=" << to_string(unitList);
  out << ")";
}

}} // namespace
