/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EOG_Service_H
#define EOG_Service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "eog_shared_types.h"

namespace riverfall { namespace eog {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class EOG_ServiceIf {
 public:
  virtual ~EOG_ServiceIf() {}
  virtual void GetServiceId(ServiceId_s& _return) = 0;
  virtual void Heartbeat(const ServiceId_s& serviceId) = 0;
  virtual void ClientConnected(const ServiceId_s& serviceId) = 0;
  virtual void ClientAboutToDisconnect(const ServiceId_s& serviceId) = 0;
  virtual void ConfigurationChanged(const std::string& configName, const std::string& configuration) = 0;
};

class EOG_ServiceIfFactory {
 public:
  typedef EOG_ServiceIf Handler;

  virtual ~EOG_ServiceIfFactory() {}

  virtual EOG_ServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(EOG_ServiceIf* /* handler */) = 0;
};

class EOG_ServiceIfSingletonFactory : virtual public EOG_ServiceIfFactory {
 public:
  EOG_ServiceIfSingletonFactory(const ::std::shared_ptr<EOG_ServiceIf>& iface) : iface_(iface) {}
  virtual ~EOG_ServiceIfSingletonFactory() {}

  virtual EOG_ServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(EOG_ServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<EOG_ServiceIf> iface_;
};

class EOG_ServiceNull : virtual public EOG_ServiceIf {
 public:
  virtual ~EOG_ServiceNull() {}
  void GetServiceId(ServiceId_s& /* _return */) {
    return;
  }
  void Heartbeat(const ServiceId_s& /* serviceId */) {
    return;
  }
  void ClientConnected(const ServiceId_s& /* serviceId */) {
    return;
  }
  void ClientAboutToDisconnect(const ServiceId_s& /* serviceId */) {
    return;
  }
  void ConfigurationChanged(const std::string& /* configName */, const std::string& /* configuration */) {
    return;
  }
};


class EOG_Service_GetServiceId_args {
 public:

  EOG_Service_GetServiceId_args(const EOG_Service_GetServiceId_args&);
  EOG_Service_GetServiceId_args& operator=(const EOG_Service_GetServiceId_args&);
  EOG_Service_GetServiceId_args() {
  }

  virtual ~EOG_Service_GetServiceId_args() noexcept;

  bool operator == (const EOG_Service_GetServiceId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EOG_Service_GetServiceId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EOG_Service_GetServiceId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EOG_Service_GetServiceId_pargs {
 public:


  virtual ~EOG_Service_GetServiceId_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EOG_Service_GetServiceId_result__isset {
  _EOG_Service_GetServiceId_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _EOG_Service_GetServiceId_result__isset;

class EOG_Service_GetServiceId_result {
 public:

  EOG_Service_GetServiceId_result(const EOG_Service_GetServiceId_result&);
  EOG_Service_GetServiceId_result& operator=(const EOG_Service_GetServiceId_result&);
  EOG_Service_GetServiceId_result() {
  }

  virtual ~EOG_Service_GetServiceId_result() noexcept;
  ServiceId_s success;
   ::riverfall::eog::EOG_Error error;

  _EOG_Service_GetServiceId_result__isset __isset;

  void __set_success(const ServiceId_s& val);

  void __set_error(const  ::riverfall::eog::EOG_Error& val);

  bool operator == (const EOG_Service_GetServiceId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const EOG_Service_GetServiceId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EOG_Service_GetServiceId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EOG_Service_GetServiceId_presult__isset {
  _EOG_Service_GetServiceId_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _EOG_Service_GetServiceId_presult__isset;

class EOG_Service_GetServiceId_presult {
 public:


  virtual ~EOG_Service_GetServiceId_presult() noexcept;
  ServiceId_s* success;
   ::riverfall::eog::EOG_Error error;

  _EOG_Service_GetServiceId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EOG_Service_Heartbeat_args__isset {
  _EOG_Service_Heartbeat_args__isset() : serviceId(false) {}
  bool serviceId :1;
} _EOG_Service_Heartbeat_args__isset;

class EOG_Service_Heartbeat_args {
 public:

  EOG_Service_Heartbeat_args(const EOG_Service_Heartbeat_args&);
  EOG_Service_Heartbeat_args& operator=(const EOG_Service_Heartbeat_args&);
  EOG_Service_Heartbeat_args() {
  }

  virtual ~EOG_Service_Heartbeat_args() noexcept;
  ServiceId_s serviceId;

  _EOG_Service_Heartbeat_args__isset __isset;

  void __set_serviceId(const ServiceId_s& val);

  bool operator == (const EOG_Service_Heartbeat_args & rhs) const
  {
    if (!(serviceId == rhs.serviceId))
      return false;
    return true;
  }
  bool operator != (const EOG_Service_Heartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EOG_Service_Heartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EOG_Service_Heartbeat_pargs {
 public:


  virtual ~EOG_Service_Heartbeat_pargs() noexcept;
  const ServiceId_s* serviceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EOG_Service_Heartbeat_result__isset {
  _EOG_Service_Heartbeat_result__isset() : error(false) {}
  bool error :1;
} _EOG_Service_Heartbeat_result__isset;

class EOG_Service_Heartbeat_result {
 public:

  EOG_Service_Heartbeat_result(const EOG_Service_Heartbeat_result&);
  EOG_Service_Heartbeat_result& operator=(const EOG_Service_Heartbeat_result&);
  EOG_Service_Heartbeat_result() {
  }

  virtual ~EOG_Service_Heartbeat_result() noexcept;
   ::riverfall::eog::EOG_Error error;

  _EOG_Service_Heartbeat_result__isset __isset;

  void __set_error(const  ::riverfall::eog::EOG_Error& val);

  bool operator == (const EOG_Service_Heartbeat_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const EOG_Service_Heartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EOG_Service_Heartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EOG_Service_Heartbeat_presult__isset {
  _EOG_Service_Heartbeat_presult__isset() : error(false) {}
  bool error :1;
} _EOG_Service_Heartbeat_presult__isset;

class EOG_Service_Heartbeat_presult {
 public:


  virtual ~EOG_Service_Heartbeat_presult() noexcept;
   ::riverfall::eog::EOG_Error error;

  _EOG_Service_Heartbeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EOG_Service_ClientConnected_args__isset {
  _EOG_Service_ClientConnected_args__isset() : serviceId(false) {}
  bool serviceId :1;
} _EOG_Service_ClientConnected_args__isset;

class EOG_Service_ClientConnected_args {
 public:

  EOG_Service_ClientConnected_args(const EOG_Service_ClientConnected_args&);
  EOG_Service_ClientConnected_args& operator=(const EOG_Service_ClientConnected_args&);
  EOG_Service_ClientConnected_args() {
  }

  virtual ~EOG_Service_ClientConnected_args() noexcept;
  ServiceId_s serviceId;

  _EOG_Service_ClientConnected_args__isset __isset;

  void __set_serviceId(const ServiceId_s& val);

  bool operator == (const EOG_Service_ClientConnected_args & rhs) const
  {
    if (!(serviceId == rhs.serviceId))
      return false;
    return true;
  }
  bool operator != (const EOG_Service_ClientConnected_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EOG_Service_ClientConnected_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EOG_Service_ClientConnected_pargs {
 public:


  virtual ~EOG_Service_ClientConnected_pargs() noexcept;
  const ServiceId_s* serviceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EOG_Service_ClientConnected_result__isset {
  _EOG_Service_ClientConnected_result__isset() : error(false) {}
  bool error :1;
} _EOG_Service_ClientConnected_result__isset;

class EOG_Service_ClientConnected_result {
 public:

  EOG_Service_ClientConnected_result(const EOG_Service_ClientConnected_result&);
  EOG_Service_ClientConnected_result& operator=(const EOG_Service_ClientConnected_result&);
  EOG_Service_ClientConnected_result() {
  }

  virtual ~EOG_Service_ClientConnected_result() noexcept;
   ::riverfall::eog::EOG_Error error;

  _EOG_Service_ClientConnected_result__isset __isset;

  void __set_error(const  ::riverfall::eog::EOG_Error& val);

  bool operator == (const EOG_Service_ClientConnected_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const EOG_Service_ClientConnected_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EOG_Service_ClientConnected_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EOG_Service_ClientConnected_presult__isset {
  _EOG_Service_ClientConnected_presult__isset() : error(false) {}
  bool error :1;
} _EOG_Service_ClientConnected_presult__isset;

class EOG_Service_ClientConnected_presult {
 public:


  virtual ~EOG_Service_ClientConnected_presult() noexcept;
   ::riverfall::eog::EOG_Error error;

  _EOG_Service_ClientConnected_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EOG_Service_ClientAboutToDisconnect_args__isset {
  _EOG_Service_ClientAboutToDisconnect_args__isset() : serviceId(false) {}
  bool serviceId :1;
} _EOG_Service_ClientAboutToDisconnect_args__isset;

class EOG_Service_ClientAboutToDisconnect_args {
 public:

  EOG_Service_ClientAboutToDisconnect_args(const EOG_Service_ClientAboutToDisconnect_args&);
  EOG_Service_ClientAboutToDisconnect_args& operator=(const EOG_Service_ClientAboutToDisconnect_args&);
  EOG_Service_ClientAboutToDisconnect_args() {
  }

  virtual ~EOG_Service_ClientAboutToDisconnect_args() noexcept;
  ServiceId_s serviceId;

  _EOG_Service_ClientAboutToDisconnect_args__isset __isset;

  void __set_serviceId(const ServiceId_s& val);

  bool operator == (const EOG_Service_ClientAboutToDisconnect_args & rhs) const
  {
    if (!(serviceId == rhs.serviceId))
      return false;
    return true;
  }
  bool operator != (const EOG_Service_ClientAboutToDisconnect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EOG_Service_ClientAboutToDisconnect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EOG_Service_ClientAboutToDisconnect_pargs {
 public:


  virtual ~EOG_Service_ClientAboutToDisconnect_pargs() noexcept;
  const ServiceId_s* serviceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EOG_Service_ClientAboutToDisconnect_result__isset {
  _EOG_Service_ClientAboutToDisconnect_result__isset() : error(false) {}
  bool error :1;
} _EOG_Service_ClientAboutToDisconnect_result__isset;

class EOG_Service_ClientAboutToDisconnect_result {
 public:

  EOG_Service_ClientAboutToDisconnect_result(const EOG_Service_ClientAboutToDisconnect_result&);
  EOG_Service_ClientAboutToDisconnect_result& operator=(const EOG_Service_ClientAboutToDisconnect_result&);
  EOG_Service_ClientAboutToDisconnect_result() {
  }

  virtual ~EOG_Service_ClientAboutToDisconnect_result() noexcept;
   ::riverfall::eog::EOG_Error error;

  _EOG_Service_ClientAboutToDisconnect_result__isset __isset;

  void __set_error(const  ::riverfall::eog::EOG_Error& val);

  bool operator == (const EOG_Service_ClientAboutToDisconnect_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const EOG_Service_ClientAboutToDisconnect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EOG_Service_ClientAboutToDisconnect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EOG_Service_ClientAboutToDisconnect_presult__isset {
  _EOG_Service_ClientAboutToDisconnect_presult__isset() : error(false) {}
  bool error :1;
} _EOG_Service_ClientAboutToDisconnect_presult__isset;

class EOG_Service_ClientAboutToDisconnect_presult {
 public:


  virtual ~EOG_Service_ClientAboutToDisconnect_presult() noexcept;
   ::riverfall::eog::EOG_Error error;

  _EOG_Service_ClientAboutToDisconnect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EOG_Service_ConfigurationChanged_args__isset {
  _EOG_Service_ConfigurationChanged_args__isset() : configName(false), configuration(false) {}
  bool configName :1;
  bool configuration :1;
} _EOG_Service_ConfigurationChanged_args__isset;

class EOG_Service_ConfigurationChanged_args {
 public:

  EOG_Service_ConfigurationChanged_args(const EOG_Service_ConfigurationChanged_args&);
  EOG_Service_ConfigurationChanged_args& operator=(const EOG_Service_ConfigurationChanged_args&);
  EOG_Service_ConfigurationChanged_args() : configName(), configuration() {
  }

  virtual ~EOG_Service_ConfigurationChanged_args() noexcept;
  std::string configName;
  std::string configuration;

  _EOG_Service_ConfigurationChanged_args__isset __isset;

  void __set_configName(const std::string& val);

  void __set_configuration(const std::string& val);

  bool operator == (const EOG_Service_ConfigurationChanged_args & rhs) const
  {
    if (!(configName == rhs.configName))
      return false;
    if (!(configuration == rhs.configuration))
      return false;
    return true;
  }
  bool operator != (const EOG_Service_ConfigurationChanged_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EOG_Service_ConfigurationChanged_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EOG_Service_ConfigurationChanged_pargs {
 public:


  virtual ~EOG_Service_ConfigurationChanged_pargs() noexcept;
  const std::string* configName;
  const std::string* configuration;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EOG_Service_ConfigurationChanged_result__isset {
  _EOG_Service_ConfigurationChanged_result__isset() : error(false) {}
  bool error :1;
} _EOG_Service_ConfigurationChanged_result__isset;

class EOG_Service_ConfigurationChanged_result {
 public:

  EOG_Service_ConfigurationChanged_result(const EOG_Service_ConfigurationChanged_result&);
  EOG_Service_ConfigurationChanged_result& operator=(const EOG_Service_ConfigurationChanged_result&);
  EOG_Service_ConfigurationChanged_result() {
  }

  virtual ~EOG_Service_ConfigurationChanged_result() noexcept;
   ::riverfall::eog::EOG_Error error;

  _EOG_Service_ConfigurationChanged_result__isset __isset;

  void __set_error(const  ::riverfall::eog::EOG_Error& val);

  bool operator == (const EOG_Service_ConfigurationChanged_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const EOG_Service_ConfigurationChanged_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EOG_Service_ConfigurationChanged_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EOG_Service_ConfigurationChanged_presult__isset {
  _EOG_Service_ConfigurationChanged_presult__isset() : error(false) {}
  bool error :1;
} _EOG_Service_ConfigurationChanged_presult__isset;

class EOG_Service_ConfigurationChanged_presult {
 public:


  virtual ~EOG_Service_ConfigurationChanged_presult() noexcept;
   ::riverfall::eog::EOG_Error error;

  _EOG_Service_ConfigurationChanged_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class EOG_ServiceClient : virtual public EOG_ServiceIf {
 public:
  EOG_ServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  EOG_ServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetServiceId(ServiceId_s& _return);
  void send_GetServiceId();
  void recv_GetServiceId(ServiceId_s& _return);
  void Heartbeat(const ServiceId_s& serviceId);
  void send_Heartbeat(const ServiceId_s& serviceId);
  void recv_Heartbeat();
  void ClientConnected(const ServiceId_s& serviceId);
  void send_ClientConnected(const ServiceId_s& serviceId);
  void recv_ClientConnected();
  void ClientAboutToDisconnect(const ServiceId_s& serviceId);
  void send_ClientAboutToDisconnect(const ServiceId_s& serviceId);
  void recv_ClientAboutToDisconnect();
  void ConfigurationChanged(const std::string& configName, const std::string& configuration);
  void send_ConfigurationChanged(const std::string& configName, const std::string& configuration);
  void recv_ConfigurationChanged();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class EOG_ServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<EOG_ServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (EOG_ServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetServiceId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Heartbeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ClientConnected(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ClientAboutToDisconnect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ConfigurationChanged(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  EOG_ServiceProcessor(::std::shared_ptr<EOG_ServiceIf> iface) :
    iface_(iface) {
    processMap_["GetServiceId"] = &EOG_ServiceProcessor::process_GetServiceId;
    processMap_["Heartbeat"] = &EOG_ServiceProcessor::process_Heartbeat;
    processMap_["ClientConnected"] = &EOG_ServiceProcessor::process_ClientConnected;
    processMap_["ClientAboutToDisconnect"] = &EOG_ServiceProcessor::process_ClientAboutToDisconnect;
    processMap_["ConfigurationChanged"] = &EOG_ServiceProcessor::process_ConfigurationChanged;
  }

  virtual ~EOG_ServiceProcessor() {}
};

class EOG_ServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  EOG_ServiceProcessorFactory(const ::std::shared_ptr< EOG_ServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< EOG_ServiceIfFactory > handlerFactory_;
};

class EOG_ServiceMultiface : virtual public EOG_ServiceIf {
 public:
  EOG_ServiceMultiface(std::vector<std::shared_ptr<EOG_ServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~EOG_ServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<EOG_ServiceIf> > ifaces_;
  EOG_ServiceMultiface() {}
  void add(::std::shared_ptr<EOG_ServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetServiceId(ServiceId_s& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetServiceId(_return);
    }
    ifaces_[i]->GetServiceId(_return);
    return;
  }

  void Heartbeat(const ServiceId_s& serviceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Heartbeat(serviceId);
    }
    ifaces_[i]->Heartbeat(serviceId);
  }

  void ClientConnected(const ServiceId_s& serviceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ClientConnected(serviceId);
    }
    ifaces_[i]->ClientConnected(serviceId);
  }

  void ClientAboutToDisconnect(const ServiceId_s& serviceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ClientAboutToDisconnect(serviceId);
    }
    ifaces_[i]->ClientAboutToDisconnect(serviceId);
  }

  void ConfigurationChanged(const std::string& configName, const std::string& configuration) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ConfigurationChanged(configName, configuration);
    }
    ifaces_[i]->ConfigurationChanged(configName, configuration);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class EOG_ServiceConcurrentClient : virtual public EOG_ServiceIf {
 public:
  EOG_ServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  EOG_ServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetServiceId(ServiceId_s& _return);
  int32_t send_GetServiceId();
  void recv_GetServiceId(ServiceId_s& _return, const int32_t seqid);
  void Heartbeat(const ServiceId_s& serviceId);
  int32_t send_Heartbeat(const ServiceId_s& serviceId);
  void recv_Heartbeat(const int32_t seqid);
  void ClientConnected(const ServiceId_s& serviceId);
  int32_t send_ClientConnected(const ServiceId_s& serviceId);
  void recv_ClientConnected(const int32_t seqid);
  void ClientAboutToDisconnect(const ServiceId_s& serviceId);
  int32_t send_ClientAboutToDisconnect(const ServiceId_s& serviceId);
  void recv_ClientAboutToDisconnect(const int32_t seqid);
  void ConfigurationChanged(const std::string& configName, const std::string& configuration);
  int32_t send_ConfigurationChanged(const std::string& configName, const std::string& configuration);
  void recv_ConfigurationChanged(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
