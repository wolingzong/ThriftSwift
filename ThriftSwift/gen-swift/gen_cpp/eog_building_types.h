/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef eog_building_TYPES_H
#define eog_building_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace riverfall { namespace eog {

struct BuildingType_e {
  enum type {
    MainPowerGenerator = 0,
    AlloySmeltery = 1,
    MineralMine = 2,
    PlasmaGenerator = 3,
    MatterGenerator = 4,
    ResourceStorage = 5,
    DefenseFactory = 6,
    Shipyard = 7,
    UtilityFactor = 8,
    AdvancedFactory = 9,
    GrandFactory = 10
  };
};

extern const std::map<int, const char*> _BuildingType_e_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const BuildingType_e::type& val);

std::string to_string(const BuildingType_e::type& val);

class Building_s;

typedef struct _Building_s__isset {
  _Building_s__isset() : level(false), buildingType(false), userId(false), buildingId(false) {}
  bool level :1;
  bool buildingType :1;
  bool userId :1;
  bool buildingId :1;
} _Building_s__isset;

class Building_s : public virtual ::apache::thrift::TBase {
 public:

  Building_s(const Building_s&);
  Building_s& operator=(const Building_s&);
  Building_s() : level(0), buildingType((BuildingType_e::type)0), userId(), buildingId() {
  }

  virtual ~Building_s() noexcept;
  int8_t level;
  BuildingType_e::type buildingType;
  std::string userId;
  std::string buildingId;

  _Building_s__isset __isset;

  void __set_level(const int8_t val);

  void __set_buildingType(const BuildingType_e::type val);

  void __set_userId(const std::string& val);

  void __set_buildingId(const std::string& val);

  bool operator == (const Building_s & rhs) const
  {
    if (!(level == rhs.level))
      return false;
    if (!(buildingType == rhs.buildingType))
      return false;
    if (!(userId == rhs.userId))
      return false;
    if (!(buildingId == rhs.buildingId))
      return false;
    return true;
  }
  bool operator != (const Building_s &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Building_s & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Building_s &a, Building_s &b);

std::ostream& operator<<(std::ostream& out, const Building_s& obj);

}} // namespace

#endif
