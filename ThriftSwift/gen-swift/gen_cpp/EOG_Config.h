/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EOG_Config_H
#define EOG_Config_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "eog_config_types.h"
#include "EOG_Service.h"

namespace riverfall { namespace eog {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class EOG_ConfigIf : virtual public  ::riverfall::eog::EOG_ServiceIf {
 public:
  virtual ~EOG_ConfigIf() {}
  virtual void GetConfiguration(std::string& _return, const std::string& configName) = 0;
  virtual bool SetConfiguration(const std::string& configName, const std::string& configuration) = 0;
  virtual bool RegisterConfiguration(const  ::riverfall::eog::ServiceId_s& serviceId, const std::string& configName) = 0;
};

class EOG_ConfigIfFactory : virtual public  ::riverfall::eog::EOG_ServiceIfFactory {
 public:
  typedef EOG_ConfigIf Handler;

  virtual ~EOG_ConfigIfFactory() {}

  virtual EOG_ConfigIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::riverfall::eog::EOG_ServiceIf* /* handler */) = 0;
};

class EOG_ConfigIfSingletonFactory : virtual public EOG_ConfigIfFactory {
 public:
  EOG_ConfigIfSingletonFactory(const ::std::shared_ptr<EOG_ConfigIf>& iface) : iface_(iface) {}
  virtual ~EOG_ConfigIfSingletonFactory() {}

  virtual EOG_ConfigIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::riverfall::eog::EOG_ServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<EOG_ConfigIf> iface_;
};

class EOG_ConfigNull : virtual public EOG_ConfigIf , virtual public  ::riverfall::eog::EOG_ServiceNull {
 public:
  virtual ~EOG_ConfigNull() {}
  void GetConfiguration(std::string& /* _return */, const std::string& /* configName */) {
    return;
  }
  bool SetConfiguration(const std::string& /* configName */, const std::string& /* configuration */) {
    bool _return = false;
    return _return;
  }
  bool RegisterConfiguration(const  ::riverfall::eog::ServiceId_s& /* serviceId */, const std::string& /* configName */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _EOG_Config_GetConfiguration_args__isset {
  _EOG_Config_GetConfiguration_args__isset() : configName(false) {}
  bool configName :1;
} _EOG_Config_GetConfiguration_args__isset;

class EOG_Config_GetConfiguration_args {
 public:

  EOG_Config_GetConfiguration_args(const EOG_Config_GetConfiguration_args&);
  EOG_Config_GetConfiguration_args& operator=(const EOG_Config_GetConfiguration_args&);
  EOG_Config_GetConfiguration_args() : configName() {
  }

  virtual ~EOG_Config_GetConfiguration_args() noexcept;
  std::string configName;

  _EOG_Config_GetConfiguration_args__isset __isset;

  void __set_configName(const std::string& val);

  bool operator == (const EOG_Config_GetConfiguration_args & rhs) const
  {
    if (!(configName == rhs.configName))
      return false;
    return true;
  }
  bool operator != (const EOG_Config_GetConfiguration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EOG_Config_GetConfiguration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EOG_Config_GetConfiguration_pargs {
 public:


  virtual ~EOG_Config_GetConfiguration_pargs() noexcept;
  const std::string* configName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EOG_Config_GetConfiguration_result__isset {
  _EOG_Config_GetConfiguration_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _EOG_Config_GetConfiguration_result__isset;

class EOG_Config_GetConfiguration_result {
 public:

  EOG_Config_GetConfiguration_result(const EOG_Config_GetConfiguration_result&);
  EOG_Config_GetConfiguration_result& operator=(const EOG_Config_GetConfiguration_result&);
  EOG_Config_GetConfiguration_result() : success() {
  }

  virtual ~EOG_Config_GetConfiguration_result() noexcept;
  std::string success;
   ::riverfall::eog::EOG_Error error;

  _EOG_Config_GetConfiguration_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_error(const  ::riverfall::eog::EOG_Error& val);

  bool operator == (const EOG_Config_GetConfiguration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const EOG_Config_GetConfiguration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EOG_Config_GetConfiguration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EOG_Config_GetConfiguration_presult__isset {
  _EOG_Config_GetConfiguration_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _EOG_Config_GetConfiguration_presult__isset;

class EOG_Config_GetConfiguration_presult {
 public:


  virtual ~EOG_Config_GetConfiguration_presult() noexcept;
  std::string* success;
   ::riverfall::eog::EOG_Error error;

  _EOG_Config_GetConfiguration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EOG_Config_SetConfiguration_args__isset {
  _EOG_Config_SetConfiguration_args__isset() : configName(false), configuration(false) {}
  bool configName :1;
  bool configuration :1;
} _EOG_Config_SetConfiguration_args__isset;

class EOG_Config_SetConfiguration_args {
 public:

  EOG_Config_SetConfiguration_args(const EOG_Config_SetConfiguration_args&);
  EOG_Config_SetConfiguration_args& operator=(const EOG_Config_SetConfiguration_args&);
  EOG_Config_SetConfiguration_args() : configName(), configuration() {
  }

  virtual ~EOG_Config_SetConfiguration_args() noexcept;
  std::string configName;
  std::string configuration;

  _EOG_Config_SetConfiguration_args__isset __isset;

  void __set_configName(const std::string& val);

  void __set_configuration(const std::string& val);

  bool operator == (const EOG_Config_SetConfiguration_args & rhs) const
  {
    if (!(configName == rhs.configName))
      return false;
    if (!(configuration == rhs.configuration))
      return false;
    return true;
  }
  bool operator != (const EOG_Config_SetConfiguration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EOG_Config_SetConfiguration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EOG_Config_SetConfiguration_pargs {
 public:


  virtual ~EOG_Config_SetConfiguration_pargs() noexcept;
  const std::string* configName;
  const std::string* configuration;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EOG_Config_SetConfiguration_result__isset {
  _EOG_Config_SetConfiguration_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _EOG_Config_SetConfiguration_result__isset;

class EOG_Config_SetConfiguration_result {
 public:

  EOG_Config_SetConfiguration_result(const EOG_Config_SetConfiguration_result&);
  EOG_Config_SetConfiguration_result& operator=(const EOG_Config_SetConfiguration_result&);
  EOG_Config_SetConfiguration_result() : success(0) {
  }

  virtual ~EOG_Config_SetConfiguration_result() noexcept;
  bool success;
   ::riverfall::eog::EOG_Error error;

  _EOG_Config_SetConfiguration_result__isset __isset;

  void __set_success(const bool val);

  void __set_error(const  ::riverfall::eog::EOG_Error& val);

  bool operator == (const EOG_Config_SetConfiguration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const EOG_Config_SetConfiguration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EOG_Config_SetConfiguration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EOG_Config_SetConfiguration_presult__isset {
  _EOG_Config_SetConfiguration_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _EOG_Config_SetConfiguration_presult__isset;

class EOG_Config_SetConfiguration_presult {
 public:


  virtual ~EOG_Config_SetConfiguration_presult() noexcept;
  bool* success;
   ::riverfall::eog::EOG_Error error;

  _EOG_Config_SetConfiguration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EOG_Config_RegisterConfiguration_args__isset {
  _EOG_Config_RegisterConfiguration_args__isset() : serviceId(false), configName(false) {}
  bool serviceId :1;
  bool configName :1;
} _EOG_Config_RegisterConfiguration_args__isset;

class EOG_Config_RegisterConfiguration_args {
 public:

  EOG_Config_RegisterConfiguration_args(const EOG_Config_RegisterConfiguration_args&);
  EOG_Config_RegisterConfiguration_args& operator=(const EOG_Config_RegisterConfiguration_args&);
  EOG_Config_RegisterConfiguration_args() : configName() {
  }

  virtual ~EOG_Config_RegisterConfiguration_args() noexcept;
   ::riverfall::eog::ServiceId_s serviceId;
  std::string configName;

  _EOG_Config_RegisterConfiguration_args__isset __isset;

  void __set_serviceId(const  ::riverfall::eog::ServiceId_s& val);

  void __set_configName(const std::string& val);

  bool operator == (const EOG_Config_RegisterConfiguration_args & rhs) const
  {
    if (!(serviceId == rhs.serviceId))
      return false;
    if (!(configName == rhs.configName))
      return false;
    return true;
  }
  bool operator != (const EOG_Config_RegisterConfiguration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EOG_Config_RegisterConfiguration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EOG_Config_RegisterConfiguration_pargs {
 public:


  virtual ~EOG_Config_RegisterConfiguration_pargs() noexcept;
  const  ::riverfall::eog::ServiceId_s* serviceId;
  const std::string* configName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EOG_Config_RegisterConfiguration_result__isset {
  _EOG_Config_RegisterConfiguration_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _EOG_Config_RegisterConfiguration_result__isset;

class EOG_Config_RegisterConfiguration_result {
 public:

  EOG_Config_RegisterConfiguration_result(const EOG_Config_RegisterConfiguration_result&);
  EOG_Config_RegisterConfiguration_result& operator=(const EOG_Config_RegisterConfiguration_result&);
  EOG_Config_RegisterConfiguration_result() : success(0) {
  }

  virtual ~EOG_Config_RegisterConfiguration_result() noexcept;
  bool success;
   ::riverfall::eog::EOG_Error error;

  _EOG_Config_RegisterConfiguration_result__isset __isset;

  void __set_success(const bool val);

  void __set_error(const  ::riverfall::eog::EOG_Error& val);

  bool operator == (const EOG_Config_RegisterConfiguration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const EOG_Config_RegisterConfiguration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EOG_Config_RegisterConfiguration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EOG_Config_RegisterConfiguration_presult__isset {
  _EOG_Config_RegisterConfiguration_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _EOG_Config_RegisterConfiguration_presult__isset;

class EOG_Config_RegisterConfiguration_presult {
 public:


  virtual ~EOG_Config_RegisterConfiguration_presult() noexcept;
  bool* success;
   ::riverfall::eog::EOG_Error error;

  _EOG_Config_RegisterConfiguration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class EOG_ConfigClient : virtual public EOG_ConfigIf, public  ::riverfall::eog::EOG_ServiceClient {
 public:
  EOG_ConfigClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::riverfall::eog::EOG_ServiceClient(prot, prot) {}
  EOG_ConfigClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::riverfall::eog::EOG_ServiceClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetConfiguration(std::string& _return, const std::string& configName);
  void send_GetConfiguration(const std::string& configName);
  void recv_GetConfiguration(std::string& _return);
  bool SetConfiguration(const std::string& configName, const std::string& configuration);
  void send_SetConfiguration(const std::string& configName, const std::string& configuration);
  bool recv_SetConfiguration();
  bool RegisterConfiguration(const  ::riverfall::eog::ServiceId_s& serviceId, const std::string& configName);
  void send_RegisterConfiguration(const  ::riverfall::eog::ServiceId_s& serviceId, const std::string& configName);
  bool recv_RegisterConfiguration();
};

class EOG_ConfigProcessor : public  ::riverfall::eog::EOG_ServiceProcessor {
 protected:
  ::std::shared_ptr<EOG_ConfigIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (EOG_ConfigProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetConfiguration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetConfiguration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RegisterConfiguration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  EOG_ConfigProcessor(::std::shared_ptr<EOG_ConfigIf> iface) :
     ::riverfall::eog::EOG_ServiceProcessor(iface),
    iface_(iface) {
    processMap_["GetConfiguration"] = &EOG_ConfigProcessor::process_GetConfiguration;
    processMap_["SetConfiguration"] = &EOG_ConfigProcessor::process_SetConfiguration;
    processMap_["RegisterConfiguration"] = &EOG_ConfigProcessor::process_RegisterConfiguration;
  }

  virtual ~EOG_ConfigProcessor() {}
};

class EOG_ConfigProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  EOG_ConfigProcessorFactory(const ::std::shared_ptr< EOG_ConfigIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< EOG_ConfigIfFactory > handlerFactory_;
};

class EOG_ConfigMultiface : virtual public EOG_ConfigIf, public  ::riverfall::eog::EOG_ServiceMultiface {
 public:
  EOG_ConfigMultiface(std::vector<std::shared_ptr<EOG_ConfigIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<EOG_ConfigIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::riverfall::eog::EOG_ServiceMultiface::add(*iter);
    }
  }
  virtual ~EOG_ConfigMultiface() {}
 protected:
  std::vector<std::shared_ptr<EOG_ConfigIf> > ifaces_;
  EOG_ConfigMultiface() {}
  void add(::std::shared_ptr<EOG_ConfigIf> iface) {
     ::riverfall::eog::EOG_ServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void GetConfiguration(std::string& _return, const std::string& configName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetConfiguration(_return, configName);
    }
    ifaces_[i]->GetConfiguration(_return, configName);
    return;
  }

  bool SetConfiguration(const std::string& configName, const std::string& configuration) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetConfiguration(configName, configuration);
    }
    return ifaces_[i]->SetConfiguration(configName, configuration);
  }

  bool RegisterConfiguration(const  ::riverfall::eog::ServiceId_s& serviceId, const std::string& configName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RegisterConfiguration(serviceId, configName);
    }
    return ifaces_[i]->RegisterConfiguration(serviceId, configName);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class EOG_ConfigConcurrentClient : virtual public EOG_ConfigIf, public  ::riverfall::eog::EOG_ServiceConcurrentClient {
 public:
  EOG_ConfigConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
     ::riverfall::eog::EOG_ServiceConcurrentClient(prot, prot, sync) {}
  EOG_ConfigConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :     ::riverfall::eog::EOG_ServiceConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetConfiguration(std::string& _return, const std::string& configName);
  int32_t send_GetConfiguration(const std::string& configName);
  void recv_GetConfiguration(std::string& _return, const int32_t seqid);
  bool SetConfiguration(const std::string& configName, const std::string& configuration);
  int32_t send_SetConfiguration(const std::string& configName, const std::string& configuration);
  bool recv_SetConfiguration(const int32_t seqid);
  bool RegisterConfiguration(const  ::riverfall::eog::ServiceId_s& serviceId, const std::string& configName);
  int32_t send_RegisterConfiguration(const  ::riverfall::eog::ServiceId_s& serviceId, const std::string& configName);
  bool recv_RegisterConfiguration(const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
