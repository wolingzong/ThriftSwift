/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "eog_batsim_int_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace riverfall { namespace eog {


BattleResult_s::~BattleResult_s() noexcept {
}


void BattleResult_s::__set_winnerSide(const  ::riverfall::eog::Army_s& val) {
  this->winnerSide = val;
}

void BattleResult_s::__set_loserSide(const  ::riverfall::eog::Army_s& val) {
  this->loserSide = val;
}
std::ostream& operator<<(std::ostream& out, const BattleResult_s& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BattleResult_s::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->winnerSide.read(iprot);
          this->__isset.winnerSide = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->loserSide.read(iprot);
          this->__isset.loserSide = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BattleResult_s::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BattleResult_s");

  xfer += oprot->writeFieldBegin("winnerSide", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->winnerSide.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("loserSide", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->loserSide.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BattleResult_s &a, BattleResult_s &b) {
  using ::std::swap;
  swap(a.winnerSide, b.winnerSide);
  swap(a.loserSide, b.loserSide);
  swap(a.__isset, b.__isset);
}

BattleResult_s::BattleResult_s(const BattleResult_s& other0) {
  winnerSide = other0.winnerSide;
  loserSide = other0.loserSide;
  __isset = other0.__isset;
}
BattleResult_s& BattleResult_s::operator=(const BattleResult_s& other1) {
  winnerSide = other1.winnerSide;
  loserSide = other1.loserSide;
  __isset = other1.__isset;
  return *this;
}
void BattleResult_s::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BattleResult_s(";
  out << "winnerSide=" << to_string(winnerSide);
  out << ", " << "loserSide=" << to_string(loserSide);
  out << ")";
}

}} // namespace
