#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class BuildingType_e(object):
    MainPowerGenerator = 0
    AlloySmeltery = 1
    MineralMine = 2
    PlasmaGenerator = 3
    MatterGenerator = 4
    ResourceStorage = 5
    DefenseFactory = 6
    Shipyard = 7
    UtilityFactor = 8
    AdvancedFactory = 9
    GrandFactory = 10

    _VALUES_TO_NAMES = {
        0: "MainPowerGenerator",
        1: "AlloySmeltery",
        2: "MineralMine",
        3: "PlasmaGenerator",
        4: "MatterGenerator",
        5: "ResourceStorage",
        6: "DefenseFactory",
        7: "Shipyard",
        8: "UtilityFactor",
        9: "AdvancedFactory",
        10: "GrandFactory",
    }

    _NAMES_TO_VALUES = {
        "MainPowerGenerator": 0,
        "AlloySmeltery": 1,
        "MineralMine": 2,
        "PlasmaGenerator": 3,
        "MatterGenerator": 4,
        "ResourceStorage": 5,
        "DefenseFactory": 6,
        "Shipyard": 7,
        "UtilityFactor": 8,
        "AdvancedFactory": 9,
        "GrandFactory": 10,
    }


class Building_s(object):
    """
    Attributes:
     - level
     - buildingType
     - userId
     - buildingId

    """


    def __init__(self, level=None, buildingType=None, userId=None, buildingId=None,):
        self.level = level
        self.buildingType = buildingType
        self.userId = userId
        self.buildingId = buildingId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.level = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.buildingType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.buildingId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Building_s')
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.BYTE, 1)
            oprot.writeByte(self.level)
            oprot.writeFieldEnd()
        if self.buildingType is not None:
            oprot.writeFieldBegin('buildingType', TType.I32, 2)
            oprot.writeI32(self.buildingType)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 3)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.buildingId is not None:
            oprot.writeFieldBegin('buildingId', TType.STRING, 4)
            oprot.writeString(self.buildingId.encode('utf-8') if sys.version_info[0] == 2 else self.buildingId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Building_s)
Building_s.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'level', None, None, ),  # 1
    (2, TType.I32, 'buildingType', None, None, ),  # 2
    (3, TType.STRING, 'userId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'buildingId', 'UTF8', None, ),  # 4
)
fix_spec(all_structs)
del all_structs
