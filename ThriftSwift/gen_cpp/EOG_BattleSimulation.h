/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EOG_BattleSimulation_H
#define EOG_BattleSimulation_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "eog_batsim_int_types.h"
#include "EOG_Service.h"

namespace riverfall { namespace eog {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class EOG_BattleSimulationIf : virtual public  ::riverfall::eog::EOG_ServiceIf {
 public:
  virtual ~EOG_BattleSimulationIf() {}
  virtual void BattleSimulation(BattleResult_s& _return, const  ::riverfall::eog::Army_s& side1, const  ::riverfall::eog::Army_s& side2) = 0;
};

class EOG_BattleSimulationIfFactory : virtual public  ::riverfall::eog::EOG_ServiceIfFactory {
 public:
  typedef EOG_BattleSimulationIf Handler;

  virtual ~EOG_BattleSimulationIfFactory() {}

  virtual EOG_BattleSimulationIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::riverfall::eog::EOG_ServiceIf* /* handler */) = 0;
};

class EOG_BattleSimulationIfSingletonFactory : virtual public EOG_BattleSimulationIfFactory {
 public:
  EOG_BattleSimulationIfSingletonFactory(const ::std::shared_ptr<EOG_BattleSimulationIf>& iface) : iface_(iface) {}
  virtual ~EOG_BattleSimulationIfSingletonFactory() {}

  virtual EOG_BattleSimulationIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::riverfall::eog::EOG_ServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<EOG_BattleSimulationIf> iface_;
};

class EOG_BattleSimulationNull : virtual public EOG_BattleSimulationIf , virtual public  ::riverfall::eog::EOG_ServiceNull {
 public:
  virtual ~EOG_BattleSimulationNull() {}
  void BattleSimulation(BattleResult_s& /* _return */, const  ::riverfall::eog::Army_s& /* side1 */, const  ::riverfall::eog::Army_s& /* side2 */) {
    return;
  }
};

typedef struct _EOG_BattleSimulation_BattleSimulation_args__isset {
  _EOG_BattleSimulation_BattleSimulation_args__isset() : side1(false), side2(false) {}
  bool side1 :1;
  bool side2 :1;
} _EOG_BattleSimulation_BattleSimulation_args__isset;

class EOG_BattleSimulation_BattleSimulation_args {
 public:

  EOG_BattleSimulation_BattleSimulation_args(const EOG_BattleSimulation_BattleSimulation_args&);
  EOG_BattleSimulation_BattleSimulation_args& operator=(const EOG_BattleSimulation_BattleSimulation_args&);
  EOG_BattleSimulation_BattleSimulation_args() {
  }

  virtual ~EOG_BattleSimulation_BattleSimulation_args() noexcept;
   ::riverfall::eog::Army_s side1;
   ::riverfall::eog::Army_s side2;

  _EOG_BattleSimulation_BattleSimulation_args__isset __isset;

  void __set_side1(const  ::riverfall::eog::Army_s& val);

  void __set_side2(const  ::riverfall::eog::Army_s& val);

  bool operator == (const EOG_BattleSimulation_BattleSimulation_args & rhs) const
  {
    if (!(side1 == rhs.side1))
      return false;
    if (!(side2 == rhs.side2))
      return false;
    return true;
  }
  bool operator != (const EOG_BattleSimulation_BattleSimulation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EOG_BattleSimulation_BattleSimulation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EOG_BattleSimulation_BattleSimulation_pargs {
 public:


  virtual ~EOG_BattleSimulation_BattleSimulation_pargs() noexcept;
  const  ::riverfall::eog::Army_s* side1;
  const  ::riverfall::eog::Army_s* side2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EOG_BattleSimulation_BattleSimulation_result__isset {
  _EOG_BattleSimulation_BattleSimulation_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _EOG_BattleSimulation_BattleSimulation_result__isset;

class EOG_BattleSimulation_BattleSimulation_result {
 public:

  EOG_BattleSimulation_BattleSimulation_result(const EOG_BattleSimulation_BattleSimulation_result&);
  EOG_BattleSimulation_BattleSimulation_result& operator=(const EOG_BattleSimulation_BattleSimulation_result&);
  EOG_BattleSimulation_BattleSimulation_result() {
  }

  virtual ~EOG_BattleSimulation_BattleSimulation_result() noexcept;
  BattleResult_s success;
   ::riverfall::eog::EOG_Error error;

  _EOG_BattleSimulation_BattleSimulation_result__isset __isset;

  void __set_success(const BattleResult_s& val);

  void __set_error(const  ::riverfall::eog::EOG_Error& val);

  bool operator == (const EOG_BattleSimulation_BattleSimulation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const EOG_BattleSimulation_BattleSimulation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EOG_BattleSimulation_BattleSimulation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EOG_BattleSimulation_BattleSimulation_presult__isset {
  _EOG_BattleSimulation_BattleSimulation_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _EOG_BattleSimulation_BattleSimulation_presult__isset;

class EOG_BattleSimulation_BattleSimulation_presult {
 public:


  virtual ~EOG_BattleSimulation_BattleSimulation_presult() noexcept;
  BattleResult_s* success;
   ::riverfall::eog::EOG_Error error;

  _EOG_BattleSimulation_BattleSimulation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class EOG_BattleSimulationClient : virtual public EOG_BattleSimulationIf, public  ::riverfall::eog::EOG_ServiceClient {
 public:
  EOG_BattleSimulationClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::riverfall::eog::EOG_ServiceClient(prot, prot) {}
  EOG_BattleSimulationClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::riverfall::eog::EOG_ServiceClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void BattleSimulation(BattleResult_s& _return, const  ::riverfall::eog::Army_s& side1, const  ::riverfall::eog::Army_s& side2);
  void send_BattleSimulation(const  ::riverfall::eog::Army_s& side1, const  ::riverfall::eog::Army_s& side2);
  void recv_BattleSimulation(BattleResult_s& _return);
};

class EOG_BattleSimulationProcessor : public  ::riverfall::eog::EOG_ServiceProcessor {
 protected:
  ::std::shared_ptr<EOG_BattleSimulationIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (EOG_BattleSimulationProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_BattleSimulation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  EOG_BattleSimulationProcessor(::std::shared_ptr<EOG_BattleSimulationIf> iface) :
     ::riverfall::eog::EOG_ServiceProcessor(iface),
    iface_(iface) {
    processMap_["BattleSimulation"] = &EOG_BattleSimulationProcessor::process_BattleSimulation;
  }

  virtual ~EOG_BattleSimulationProcessor() {}
};

class EOG_BattleSimulationProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  EOG_BattleSimulationProcessorFactory(const ::std::shared_ptr< EOG_BattleSimulationIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< EOG_BattleSimulationIfFactory > handlerFactory_;
};

class EOG_BattleSimulationMultiface : virtual public EOG_BattleSimulationIf, public  ::riverfall::eog::EOG_ServiceMultiface {
 public:
  EOG_BattleSimulationMultiface(std::vector<std::shared_ptr<EOG_BattleSimulationIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<EOG_BattleSimulationIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::riverfall::eog::EOG_ServiceMultiface::add(*iter);
    }
  }
  virtual ~EOG_BattleSimulationMultiface() {}
 protected:
  std::vector<std::shared_ptr<EOG_BattleSimulationIf> > ifaces_;
  EOG_BattleSimulationMultiface() {}
  void add(::std::shared_ptr<EOG_BattleSimulationIf> iface) {
     ::riverfall::eog::EOG_ServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void BattleSimulation(BattleResult_s& _return, const  ::riverfall::eog::Army_s& side1, const  ::riverfall::eog::Army_s& side2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->BattleSimulation(_return, side1, side2);
    }
    ifaces_[i]->BattleSimulation(_return, side1, side2);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class EOG_BattleSimulationConcurrentClient : virtual public EOG_BattleSimulationIf, public  ::riverfall::eog::EOG_ServiceConcurrentClient {
 public:
  EOG_BattleSimulationConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
     ::riverfall::eog::EOG_ServiceConcurrentClient(prot, prot, sync) {}
  EOG_BattleSimulationConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :     ::riverfall::eog::EOG_ServiceConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void BattleSimulation(BattleResult_s& _return, const  ::riverfall::eog::Army_s& side1, const  ::riverfall::eog::Army_s& side2);
  int32_t send_BattleSimulation(const  ::riverfall::eog::Army_s& side1, const  ::riverfall::eog::Army_s& side2);
  void recv_BattleSimulation(BattleResult_s& _return, const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
