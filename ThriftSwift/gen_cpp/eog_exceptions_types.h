/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef eog_exceptions_TYPES_H
#define eog_exceptions_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace riverfall { namespace eog {

class EOG_Error;

typedef struct _EOG_Error__isset {
  _EOG_Error__isset() : errorCode(false), errorMsg(false) {}
  bool errorCode :1;
  bool errorMsg :1;
} _EOG_Error__isset;

class EOG_Error : public ::apache::thrift::TException {
 public:

  EOG_Error(const EOG_Error&);
  EOG_Error& operator=(const EOG_Error&);
  EOG_Error() : errorCode(0), errorMsg() {
  }

  virtual ~EOG_Error() noexcept;
  int64_t errorCode;
  std::string errorMsg;

  _EOG_Error__isset __isset;

  void __set_errorCode(const int64_t val);

  void __set_errorMsg(const std::string& val);

  bool operator == (const EOG_Error & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(errorMsg == rhs.errorMsg))
      return false;
    return true;
  }
  bool operator != (const EOG_Error &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EOG_Error & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept;
};

void swap(EOG_Error &a, EOG_Error &b);

std::ostream& operator<<(std::ostream& out, const EOG_Error& obj);

}} // namespace

#endif
