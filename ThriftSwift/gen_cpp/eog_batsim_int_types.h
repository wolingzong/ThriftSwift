/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef eog_batsim_int_TYPES_H
#define eog_batsim_int_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "eog_shared_types.h"
#include "eog_unit_types.h"
#include "eog_exceptions_types.h"


namespace riverfall { namespace eog {

class BattleResult_s;

typedef struct _BattleResult_s__isset {
  _BattleResult_s__isset() : winnerSide(false), loserSide(false) {}
  bool winnerSide :1;
  bool loserSide :1;
} _BattleResult_s__isset;

class BattleResult_s : public virtual ::apache::thrift::TBase {
 public:

  BattleResult_s(const BattleResult_s&);
  BattleResult_s& operator=(const BattleResult_s&);
  BattleResult_s() {
  }

  virtual ~BattleResult_s() noexcept;
   ::riverfall::eog::Army_s winnerSide;
   ::riverfall::eog::Army_s loserSide;

  _BattleResult_s__isset __isset;

  void __set_winnerSide(const  ::riverfall::eog::Army_s& val);

  void __set_loserSide(const  ::riverfall::eog::Army_s& val);

  bool operator == (const BattleResult_s & rhs) const
  {
    if (!(winnerSide == rhs.winnerSide))
      return false;
    if (!(loserSide == rhs.loserSide))
      return false;
    return true;
  }
  bool operator != (const BattleResult_s &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BattleResult_s & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BattleResult_s &a, BattleResult_s &b);

std::ostream& operator<<(std::ostream& out, const BattleResult_s& obj);

}} // namespace

#endif
