/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef eog_shared_TYPES_H
#define eog_shared_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "eog_config_types_types.h"
#include "eog_exceptions_types.h"


namespace riverfall { namespace eog {

class ServiceId_s;

typedef struct _ServiceId_s__isset {
  _ServiceId_s__isset() : serviceId(false), serviceName(false), serviceIp(false), port(false) {}
  bool serviceId :1;
  bool serviceName :1;
  bool serviceIp :1;
  bool port :1;
} _ServiceId_s__isset;

class ServiceId_s : public virtual ::apache::thrift::TBase {
 public:

  ServiceId_s(const ServiceId_s&);
  ServiceId_s& operator=(const ServiceId_s&);
  ServiceId_s() : serviceId(0), serviceName(), serviceIp(), port(0) {
  }

  virtual ~ServiceId_s() noexcept;
  int64_t serviceId;
  std::string serviceName;
  std::string serviceIp;
  int32_t port;

  _ServiceId_s__isset __isset;

  void __set_serviceId(const int64_t val);

  void __set_serviceName(const std::string& val);

  void __set_serviceIp(const std::string& val);

  void __set_port(const int32_t val);

  bool operator == (const ServiceId_s & rhs) const
  {
    if (!(serviceId == rhs.serviceId))
      return false;
    if (!(serviceName == rhs.serviceName))
      return false;
    if (!(serviceIp == rhs.serviceIp))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const ServiceId_s &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceId_s & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ServiceId_s &a, ServiceId_s &b);

std::ostream& operator<<(std::ostream& out, const ServiceId_s& obj);

}} // namespace

#endif
