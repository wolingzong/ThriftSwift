/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "eog_building_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace riverfall { namespace eog {

int _kBuildingType_eValues[] = {
  BuildingType_e::MainPowerGenerator,
  BuildingType_e::AlloySmeltery,
  BuildingType_e::MineralMine,
  BuildingType_e::PlasmaGenerator,
  BuildingType_e::MatterGenerator,
  BuildingType_e::ResourceStorage,
  BuildingType_e::DefenseFactory,
  BuildingType_e::Shipyard,
  BuildingType_e::UtilityFactor,
  BuildingType_e::AdvancedFactory,
  BuildingType_e::GrandFactory
};
const char* _kBuildingType_eNames[] = {
  "MainPowerGenerator",
  "AlloySmeltery",
  "MineralMine",
  "PlasmaGenerator",
  "MatterGenerator",
  "ResourceStorage",
  "DefenseFactory",
  "Shipyard",
  "UtilityFactor",
  "AdvancedFactory",
  "GrandFactory"
};
const std::map<int, const char*> _BuildingType_e_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(11, _kBuildingType_eValues, _kBuildingType_eNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const BuildingType_e::type& val) {
  std::map<int, const char*>::const_iterator it = _BuildingType_e_VALUES_TO_NAMES.find(val);
  if (it != _BuildingType_e_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const BuildingType_e::type& val) {
  std::map<int, const char*>::const_iterator it = _BuildingType_e_VALUES_TO_NAMES.find(val);
  if (it != _BuildingType_e_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


Building_s::~Building_s() noexcept {
}


void Building_s::__set_level(const int8_t val) {
  this->level = val;
}

void Building_s::__set_buildingType(const BuildingType_e::type val) {
  this->buildingType = val;
}

void Building_s::__set_userId(const std::string& val) {
  this->userId = val;
}

void Building_s::__set_buildingId(const std::string& val) {
  this->buildingId = val;
}
std::ostream& operator<<(std::ostream& out, const Building_s& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Building_s::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->level);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->buildingType = (BuildingType_e::type)ecast0;
          this->__isset.buildingType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildingId);
          this->__isset.buildingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Building_s::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Building_s");

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buildingType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->buildingType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->userId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buildingId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->buildingId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Building_s &a, Building_s &b) {
  using ::std::swap;
  swap(a.level, b.level);
  swap(a.buildingType, b.buildingType);
  swap(a.userId, b.userId);
  swap(a.buildingId, b.buildingId);
  swap(a.__isset, b.__isset);
}

Building_s::Building_s(const Building_s& other1) {
  level = other1.level;
  buildingType = other1.buildingType;
  userId = other1.userId;
  buildingId = other1.buildingId;
  __isset = other1.__isset;
}
Building_s& Building_s::operator=(const Building_s& other2) {
  level = other2.level;
  buildingType = other2.buildingType;
  userId = other2.userId;
  buildingId = other2.buildingId;
  __isset = other2.__isset;
  return *this;
}
void Building_s::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Building_s(";
  out << "level=" << to_string(level);
  out << ", " << "buildingType=" << to_string(buildingType);
  out << ", " << "userId=" << to_string(userId);
  out << ", " << "buildingId=" << to_string(buildingId);
  out << ")";
}

}} // namespace
