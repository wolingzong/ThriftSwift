/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import Foundation

import Thrift


public func ==(lhs: Building_s, rhs: Building_s) -> Bool {
  return
    (lhs.level == rhs.level) &&
    (lhs.buildingType == rhs.buildingType) &&
    (lhs.userId == rhs.userId) &&
    (lhs.buildingId == rhs.buildingId)
}

extension Building_s : CustomStringConvertible {

  public var description : String {
    var desc = "Building_s("
    desc += "level=\(String(describing: self.level)), "
    desc += "buildingType=\(String(describing: self.buildingType)), "
    desc += "userId=\(String(describing: self.userId)), "
    desc += "buildingId=\(String(describing: self.buildingId))"
    return desc
  }

}

extension Building_s : Hashable {

  public var hashValue : Int {
    let prime = 31
    var result = 1
    result = prime &* result &+ (level.hashValue)
    result = prime &* result &+ (buildingType.hashValue)
    result = prime &* result &+ (userId.hashValue)
    result = prime &* result &+ (buildingId.hashValue)
    return result
  }

}

extension Building_s : TStruct {

  public static var fieldIds: [String: Int32] {
    return ["level": 1, "buildingType": 2, "userId": 3, "buildingId": 4, ]
  }

  public static var structName: String { return "Building_s" }

  public static func read(from proto: TProtocol) throws -> Building_s {
    _ = try proto.readStructBegin()
    var level: Int8!
    var buildingType: BuildingType_e!
    var userId: String!
    var buildingId: String!

    fields: while true {

      let (_, fieldType, fieldID) = try proto.readFieldBegin()

      switch (fieldID, fieldType) {
        case (_, .stop):            break fields
        case (1, .i8):            level = try Int8.read(from: proto)
        case (2, .i32):             buildingType = try BuildingType_e.read(from: proto)
        case (3, .string):           userId = try String.read(from: proto)
        case (4, .string):           buildingId = try String.read(from: proto)
        case let (_, unknownType):  try proto.skip(type: unknownType)
      }

      try proto.readFieldEnd()
    }

    try proto.readStructEnd()
    // Required fields
    try proto.validateValue(level, named: "level")
    try proto.validateValue(buildingType, named: "buildingType")
    try proto.validateValue(userId, named: "userId")
    try proto.validateValue(buildingId, named: "buildingId")

    return Building_s(level: level, buildingType: buildingType, userId: userId, buildingId: buildingId)
  }

}



