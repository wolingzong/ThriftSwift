/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import Foundation

import Thrift


public func ==(lhs: EOG_Error, rhs: EOG_Error) -> Bool {
  return
    (lhs.errorCode == rhs.errorCode) &&
    (lhs.errorMsg == rhs.errorMsg)
}

extension EOG_Error : CustomStringConvertible {

  public var description : String {
    var desc = "EOG_Error("
    desc += "errorCode=\(String(describing: self.errorCode)), "
    desc += "errorMsg=\(String(describing: self.errorMsg))"
    return desc
  }

}

extension EOG_Error : Hashable {

  public var hashValue : Int {
    let prime = 31
    var result = 1
    result = prime &* result &+ (errorCode.hashValue)
    result = prime &* result &+ (errorMsg.hashValue)
    return result
  }

}

extension EOG_Error : TStruct {

  public static var fieldIds: [String: Int32] {
    return ["errorCode": 1, "errorMsg": 2, ]
  }

  public static var structName: String { return "EOG_Error" }

  public static func read(from proto: TProtocol) throws -> EOG_Error {
    _ = try proto.readStructBegin()
    var errorCode: Int64!
    var errorMsg: String!

    fields: while true {

      let (_, fieldType, fieldID) = try proto.readFieldBegin()

      switch (fieldID, fieldType) {
        case (_, .stop):            break fields
        case (1, .i64):             errorCode = try Int64.read(from: proto)
        case (2, .string):           errorMsg = try String.read(from: proto)
        case let (_, unknownType):  try proto.skip(type: unknownType)
      }

      try proto.readFieldEnd()
    }

    try proto.readStructEnd()
    // Required fields
    try proto.validateValue(errorCode, named: "errorCode")
    try proto.validateValue(errorMsg, named: "errorMsg")

    return EOG_Error(errorCode: errorCode, errorMsg: errorMsg)
  }

}



