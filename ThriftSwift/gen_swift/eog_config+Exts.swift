/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import Foundation

import Thrift


fileprivate final class EOG_Config_GetConfiguration_args {

  fileprivate var configName: String


  fileprivate init(configName: String) {
    self.configName = configName
  }

}

fileprivate func ==(lhs: EOG_Config_GetConfiguration_args, rhs: EOG_Config_GetConfiguration_args) -> Bool {
  return
    (lhs.configName == rhs.configName)
}

extension EOG_Config_GetConfiguration_args : Hashable {

  fileprivate var hashValue : Int {
    let prime = 31
    var result = 1
    result = prime &* result &+ (configName.hashValue)
    return result
  }

}

extension EOG_Config_GetConfiguration_args : TStruct {

  fileprivate static var fieldIds: [String: Int32] {
    return ["configName": 1, ]
  }

  fileprivate static var structName: String { return "EOG_Config_GetConfiguration_args" }

  fileprivate static func read(from proto: TProtocol) throws -> EOG_Config_GetConfiguration_args {
    _ = try proto.readStructBegin()
    var configName: String!

    fields: while true {

      let (_, fieldType, fieldID) = try proto.readFieldBegin()

      switch (fieldID, fieldType) {
        case (_, .stop):            break fields
        case (1, .string):           configName = try String.read(from: proto)
        case let (_, unknownType):  try proto.skip(type: unknownType)
      }

      try proto.readFieldEnd()
    }

    try proto.readStructEnd()
    // Required fields
    try proto.validateValue(configName, named: "configName")

    return EOG_Config_GetConfiguration_args(configName: configName)
  }

}



fileprivate final class EOG_Config_GetConfiguration_result {

  fileprivate var success: String?

  fileprivate var error: EOG_Error?


  fileprivate init() { }
  fileprivate init(success: String?, error: EOG_Error?) {
    self.success = success
    self.error = error
  }

}

fileprivate func ==(lhs: EOG_Config_GetConfiguration_result, rhs: EOG_Config_GetConfiguration_result) -> Bool {
  return
    (lhs.success == rhs.success) &&
    (lhs.error == rhs.error)
}

extension EOG_Config_GetConfiguration_result : Hashable {

  fileprivate var hashValue : Int {
    let prime = 31
    var result = 1
    result = prime &* result &+ (success?.hashValue ?? 0)
    result = prime &* result &+ (error?.hashValue ?? 0)
    return result
  }

}

extension EOG_Config_GetConfiguration_result : TStruct {

  fileprivate static var fieldIds: [String: Int32] {
    return ["success": 0, "error": 1, ]
  }

  fileprivate static var structName: String { return "EOG_Config_GetConfiguration_result" }

  fileprivate static func read(from proto: TProtocol) throws -> EOG_Config_GetConfiguration_result {
    _ = try proto.readStructBegin()
    var success: String?
    var error: EOG_Error?

    fields: while true {

      let (_, fieldType, fieldID) = try proto.readFieldBegin()

      switch (fieldID, fieldType) {
        case (_, .stop):            break fields
        case (0, .string):           success = try String.read(from: proto)
        case (1, .struct):           error = try EOG_Error.read(from: proto)
        case let (_, unknownType):  try proto.skip(type: unknownType)
      }

      try proto.readFieldEnd()
    }

    try proto.readStructEnd()

    return EOG_Config_GetConfiguration_result(success: success, error: error)
  }

}



fileprivate final class EOG_Config_SetConfiguration_args {

  fileprivate var configName: String

  fileprivate var configuration: String


  fileprivate init(configName: String, configuration: String) {
    self.configName = configName
    self.configuration = configuration
  }

}

fileprivate func ==(lhs: EOG_Config_SetConfiguration_args, rhs: EOG_Config_SetConfiguration_args) -> Bool {
  return
    (lhs.configName == rhs.configName) &&
    (lhs.configuration == rhs.configuration)
}

extension EOG_Config_SetConfiguration_args : Hashable {

  fileprivate var hashValue : Int {
    let prime = 31
    var result = 1
    result = prime &* result &+ (configName.hashValue)
    result = prime &* result &+ (configuration.hashValue)
    return result
  }

}

extension EOG_Config_SetConfiguration_args : TStruct {

  fileprivate static var fieldIds: [String: Int32] {
    return ["configName": 1, "configuration": 2, ]
  }

  fileprivate static var structName: String { return "EOG_Config_SetConfiguration_args" }

  fileprivate static func read(from proto: TProtocol) throws -> EOG_Config_SetConfiguration_args {
    _ = try proto.readStructBegin()
    var configName: String!
    var configuration: String!

    fields: while true {

      let (_, fieldType, fieldID) = try proto.readFieldBegin()

      switch (fieldID, fieldType) {
        case (_, .stop):            break fields
        case (1, .string):           configName = try String.read(from: proto)
        case (2, .string):           configuration = try String.read(from: proto)
        case let (_, unknownType):  try proto.skip(type: unknownType)
      }

      try proto.readFieldEnd()
    }

    try proto.readStructEnd()
    // Required fields
    try proto.validateValue(configName, named: "configName")
    try proto.validateValue(configuration, named: "configuration")

    return EOG_Config_SetConfiguration_args(configName: configName, configuration: configuration)
  }

}



fileprivate final class EOG_Config_SetConfiguration_result {

  fileprivate var success: Bool?

  fileprivate var error: EOG_Error?


  fileprivate init() { }
  fileprivate init(success: Bool?, error: EOG_Error?) {
    self.success = success
    self.error = error
  }

}

fileprivate func ==(lhs: EOG_Config_SetConfiguration_result, rhs: EOG_Config_SetConfiguration_result) -> Bool {
  return
    (lhs.success == rhs.success) &&
    (lhs.error == rhs.error)
}

extension EOG_Config_SetConfiguration_result : Hashable {

  fileprivate var hashValue : Int {
    let prime = 31
    var result = 1
    result = prime &* result &+ (success?.hashValue ?? 0)
    result = prime &* result &+ (error?.hashValue ?? 0)
    return result
  }

}

extension EOG_Config_SetConfiguration_result : TStruct {

  fileprivate static var fieldIds: [String: Int32] {
    return ["success": 0, "error": 1, ]
  }

  fileprivate static var structName: String { return "EOG_Config_SetConfiguration_result" }

  fileprivate static func read(from proto: TProtocol) throws -> EOG_Config_SetConfiguration_result {
    _ = try proto.readStructBegin()
    var success: Bool?
    var error: EOG_Error?

    fields: while true {

      let (_, fieldType, fieldID) = try proto.readFieldBegin()

      switch (fieldID, fieldType) {
        case (_, .stop):            break fields
        case (0, .bool):            success = try Bool.read(from: proto)
        case (1, .struct):           error = try EOG_Error.read(from: proto)
        case let (_, unknownType):  try proto.skip(type: unknownType)
      }

      try proto.readFieldEnd()
    }

    try proto.readStructEnd()

    return EOG_Config_SetConfiguration_result(success: success, error: error)
  }

}



fileprivate final class EOG_Config_RegisterConfiguration_args {

  fileprivate var serviceId: ServiceId_s

  fileprivate var configName: String


  fileprivate init(serviceId: ServiceId_s, configName: String) {
    self.serviceId = serviceId
    self.configName = configName
  }

}

fileprivate func ==(lhs: EOG_Config_RegisterConfiguration_args, rhs: EOG_Config_RegisterConfiguration_args) -> Bool {
  return
    (lhs.serviceId == rhs.serviceId) &&
    (lhs.configName == rhs.configName)
}

extension EOG_Config_RegisterConfiguration_args : Hashable {

  fileprivate var hashValue : Int {
    let prime = 31
    var result = 1
    result = prime &* result &+ (serviceId.hashValue)
    result = prime &* result &+ (configName.hashValue)
    return result
  }

}

extension EOG_Config_RegisterConfiguration_args : TStruct {

  fileprivate static var fieldIds: [String: Int32] {
    return ["serviceId": 1, "configName": 2, ]
  }

  fileprivate static var structName: String { return "EOG_Config_RegisterConfiguration_args" }

  fileprivate static func read(from proto: TProtocol) throws -> EOG_Config_RegisterConfiguration_args {
    _ = try proto.readStructBegin()
    var serviceId: ServiceId_s!
    var configName: String!

    fields: while true {

      let (_, fieldType, fieldID) = try proto.readFieldBegin()

      switch (fieldID, fieldType) {
        case (_, .stop):            break fields
        case (1, .struct):           serviceId = try ServiceId_s.read(from: proto)
        case (2, .string):           configName = try String.read(from: proto)
        case let (_, unknownType):  try proto.skip(type: unknownType)
      }

      try proto.readFieldEnd()
    }

    try proto.readStructEnd()
    // Required fields
    try proto.validateValue(serviceId, named: "serviceId")
    try proto.validateValue(configName, named: "configName")

    return EOG_Config_RegisterConfiguration_args(serviceId: serviceId, configName: configName)
  }

}



fileprivate final class EOG_Config_RegisterConfiguration_result {

  fileprivate var success: Bool?

  fileprivate var error: EOG_Error?


  fileprivate init() { }
  fileprivate init(success: Bool?, error: EOG_Error?) {
    self.success = success
    self.error = error
  }

}

fileprivate func ==(lhs: EOG_Config_RegisterConfiguration_result, rhs: EOG_Config_RegisterConfiguration_result) -> Bool {
  return
    (lhs.success == rhs.success) &&
    (lhs.error == rhs.error)
}

extension EOG_Config_RegisterConfiguration_result : Hashable {

  fileprivate var hashValue : Int {
    let prime = 31
    var result = 1
    result = prime &* result &+ (success?.hashValue ?? 0)
    result = prime &* result &+ (error?.hashValue ?? 0)
    return result
  }

}

extension EOG_Config_RegisterConfiguration_result : TStruct {

  fileprivate static var fieldIds: [String: Int32] {
    return ["success": 0, "error": 1, ]
  }

  fileprivate static var structName: String { return "EOG_Config_RegisterConfiguration_result" }

  fileprivate static func read(from proto: TProtocol) throws -> EOG_Config_RegisterConfiguration_result {
    _ = try proto.readStructBegin()
    var success: Bool?
    var error: EOG_Error?

    fields: while true {

      let (_, fieldType, fieldID) = try proto.readFieldBegin()

      switch (fieldID, fieldType) {
        case (_, .stop):            break fields
        case (0, .bool):            success = try Bool.read(from: proto)
        case (1, .struct):           error = try EOG_Error.read(from: proto)
        case let (_, unknownType):  try proto.skip(type: unknownType)
      }

      try proto.readFieldEnd()
    }

    try proto.readStructEnd()

    return EOG_Config_RegisterConfiguration_result(success: success, error: error)
  }

}



extension EOG_ConfigClient : EOG_Config {

  private func send_GetConfiguration(configName: String) throws {
    try outProtocol.writeMessageBegin(name: "GetConfiguration", type: .call, sequenceID: 0)
    let args = EOG_Config_GetConfiguration_args(configName: configName)
    try args.write(to: outProtocol)
    try outProtocol.writeMessageEnd()
  }

  private func recv_GetConfiguration() throws -> String {
    try inProtocol.readResultMessageBegin() 
    let result = try EOG_Config_GetConfiguration_result.read(from: inProtocol)
    try inProtocol.readMessageEnd()

    if let success = result.success {
      return success
    }
    if let error = result.error {
      throw error
    }
    throw TApplicationError(error: .missingResult(methodName: "GetConfiguration"))
  }

  public func GetConfiguration(configName: String) throws -> String {
    try send_GetConfiguration(configName: configName)
    try outProtocol.transport.flush()
    return try recv_GetConfiguration()
  }

  private func send_SetConfiguration(configName: String, configuration: String) throws {
    try outProtocol.writeMessageBegin(name: "SetConfiguration", type: .call, sequenceID: 0)
    let args = EOG_Config_SetConfiguration_args(configName: configName, configuration: configuration)
    try args.write(to: outProtocol)
    try outProtocol.writeMessageEnd()
  }

  private func recv_SetConfiguration() throws -> Bool {
    try inProtocol.readResultMessageBegin() 
    let result = try EOG_Config_SetConfiguration_result.read(from: inProtocol)
    try inProtocol.readMessageEnd()

    if let success = result.success {
      return success
    }
    if let error = result.error {
      throw error
    }
    throw TApplicationError(error: .missingResult(methodName: "SetConfiguration"))
  }

  public func SetConfiguration(configName: String, configuration: String) throws -> Bool {
    try send_SetConfiguration(configName: configName, configuration: configuration)
    try outProtocol.transport.flush()
    return try recv_SetConfiguration()
  }

  private func send_RegisterConfiguration(serviceId: ServiceId_s, configName: String) throws {
    try outProtocol.writeMessageBegin(name: "RegisterConfiguration", type: .call, sequenceID: 0)
    let args = EOG_Config_RegisterConfiguration_args(serviceId: serviceId, configName: configName)
    try args.write(to: outProtocol)
    try outProtocol.writeMessageEnd()
  }

  private func recv_RegisterConfiguration() throws -> Bool {
    try inProtocol.readResultMessageBegin() 
    let result = try EOG_Config_RegisterConfiguration_result.read(from: inProtocol)
    try inProtocol.readMessageEnd()

    if let success = result.success {
      return success
    }
    if let error = result.error {
      throw error
    }
    throw TApplicationError(error: .missingResult(methodName: "RegisterConfiguration"))
  }

  public func RegisterConfiguration(serviceId: ServiceId_s, configName: String) throws -> Bool {
    try send_RegisterConfiguration(serviceId: serviceId, configName: configName)
    try outProtocol.transport.flush()
    return try recv_RegisterConfiguration()
  }

}

extension EOG_ConfigProcessor : TProcessor {

  static let processorHandlers: ProcessorHandlerDictionary = {

    var processorHandlers = ProcessorHandlerDictionary()

    processorHandlers["GetConfiguration"] = { sequenceID, inProtocol, outProtocol, handler in

      let args = try EOG_Config_GetConfiguration_args.read(from: inProtocol)

      try inProtocol.readMessageEnd()

      var result = EOG_Config_GetConfiguration_result()
      do {
        result.success = try handler.GetConfiguration(configName: args.configName)
      }
      catch let error as EOG_Error { result.error = error }
      catch let error { throw error }

      try outProtocol.writeMessageBegin(name: "GetConfiguration", type: .reply, sequenceID: sequenceID)
      try result.write(to: outProtocol)
      try outProtocol.writeMessageEnd()
    }
    processorHandlers["SetConfiguration"] = { sequenceID, inProtocol, outProtocol, handler in

      let args = try EOG_Config_SetConfiguration_args.read(from: inProtocol)

      try inProtocol.readMessageEnd()

      var result = EOG_Config_SetConfiguration_result()
      do {
        result.success = try handler.SetConfiguration(configName: args.configName, configuration: args.configuration)
      }
      catch let error as EOG_Error { result.error = error }
      catch let error { throw error }

      try outProtocol.writeMessageBegin(name: "SetConfiguration", type: .reply, sequenceID: sequenceID)
      try result.write(to: outProtocol)
      try outProtocol.writeMessageEnd()
    }
    processorHandlers["RegisterConfiguration"] = { sequenceID, inProtocol, outProtocol, handler in

      let args = try EOG_Config_RegisterConfiguration_args.read(from: inProtocol)

      try inProtocol.readMessageEnd()

      var result = EOG_Config_RegisterConfiguration_result()
      do {
        result.success = try handler.RegisterConfiguration(serviceId: args.serviceId, configName: args.configName)
      }
      catch let error as EOG_Error { result.error = error }
      catch let error { throw error }

      try outProtocol.writeMessageBegin(name: "RegisterConfiguration", type: .reply, sequenceID: sequenceID)
      try result.write(to: outProtocol)
      try outProtocol.writeMessageEnd()
    }
    return processorHandlers
  }()

  public func process(on inProtocol: TProtocol, outProtocol: TProtocol) throws {

    let (messageName, _, sequenceID) = try inProtocol.readMessageBegin()

    if let processorHandler = EOG_ConfigProcessor.processorHandlers[messageName] {
      do {
        try processorHandler(sequenceID, inProtocol, outProtocol, service)
      }
      catch let error as TApplicationError {
        try outProtocol.writeException(messageName: messageName, sequenceID: sequenceID, ex: error)
      }
    }
    else {
      try inProtocol.skip(type: .struct)
      try inProtocol.readMessageEnd()
      let ex = TApplicationError(error: .unknownMethod(methodName: messageName))
      try outProtocol.writeException(messageName: messageName, sequenceID: sequenceID, ex: ex)
    }
  }
}

