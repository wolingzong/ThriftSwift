/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import Foundation

import Thrift


public enum BuildingType_e : TEnum {
  case mainpowergenerator
  case alloysmeltery
  case mineralmine
  case plasmagenerator
  case mattergenerator
  case resourcestorage
  case defensefactory
  case shipyard
  case utilityfactor
  case advancedfactory
  case grandfactory

  public static func read(from proto: TProtocol) throws -> BuildingType_e {
    let raw: Int32 = try proto.read()
    let new = BuildingType_e(rawValue: raw)
    if let unwrapped = new {
      return unwrapped
    } else {
      throw TProtocolError(error: .invalidData,
                           message: "Invalid enum value (\(raw)) for \(BuildingType_e.self)")
    }
  }

  public init() {
    self = .mainpowergenerator
  }

  public var rawValue: Int32 {
    switch self {
    case .mainpowergenerator: return 0
    case .alloysmeltery: return 1
    case .mineralmine: return 2
    case .plasmagenerator: return 3
    case .mattergenerator: return 4
    case .resourcestorage: return 5
    case .defensefactory: return 6
    case .shipyard: return 7
    case .utilityfactor: return 8
    case .advancedfactory: return 9
    case .grandfactory: return 10
    }
  }

  public init?(rawValue: Int32) {
    switch rawValue {
    case 0: self = .mainpowergenerator
    case 1: self = .alloysmeltery
    case 2: self = .mineralmine
    case 3: self = .plasmagenerator
    case 4: self = .mattergenerator
    case 5: self = .resourcestorage
    case 6: self = .defensefactory
    case 7: self = .shipyard
    case 8: self = .utilityfactor
    case 9: self = .advancedfactory
    case 10: self = .grandfactory
    default: return nil
    }
  }
}

public final class Building_s {

  public var level: Int8

  public var buildingType: BuildingType_e

  public var userId: String

  public var buildingId: String


  public init(level: Int8, buildingType: BuildingType_e, userId: String, buildingId: String) {
    self.level = level
    self.buildingType = buildingType
    self.userId = userId
    self.buildingId = buildingId
  }

}


